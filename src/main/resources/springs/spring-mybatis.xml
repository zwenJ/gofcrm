<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- spring整合mybatis和mysql连接的配置文件 -->

    <!-- mybatis数据源的配置  这里使用Druid数据源 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driver}" />

        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc_initialSize}" />
        <property name="minIdle" value="${jdbc_minIdle}" />
        <property name="maxActive" value="${jdbc_maxActive}" />

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc_maxWait}" />

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />

        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />

        <!-- 配置监控统计拦截的filters, 监控统计："stat",防SQL注入："wall",组合使用： "stat,wall" -->
        <property name="filters" value="stat" />
    </bean>

    <!-- SqlSessionFactory配置 -->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据源 -->
        <property name="dataSource" ref="dataSource" />
        <!-- mybatis配置文件信息
            这里还可以使用：<property name="configLocation" value="classpath:mybatis-config.xml"/> 直接加载mybatis的配置文件
        -->
        <property name="configurationProperties">
            <props>
                <!-- 使用SLF4J作为日志服务层 -->
                <prop key="logImpl">SLF4J</prop>
                <!-- 开启缓存 -->
                <prop key="cacheEnabled">false</prop>
                <!-- 查询时，关闭关联对象即时加载以提高性能 -->
                <prop key="lazyLoadingEnabled">false</prop>
                <!-- 设置关联对象加载的形态，此处为按需加载字段(加载字段由SQL指定)，不会加载关联表的所有字段，以提高性能 -->
                <prop key="aggressiveLazyLoading">true</prop>
                <!-- 对于未知的SQL查询，允许返回不同的结果集以达到通用的效果 -->
                <prop key="multipleResultSetsEnabled">true</prop>
                <!-- 允许使用列标签代替列名 -->
                <prop key="useColumnLabel">true</prop>
                <!-- 允许使用自定义的主键值(比如由程序生成的UUID 32位编码作为键值)，数据表的PK生成策略将被覆盖 -->
                <prop key="useGeneratedKeys">true</prop>
                <!-- 给予被嵌套的resultMap以字段-属性的映射支持 -->
                <prop key="autoMappingBehavior">FULL</prop>
                <!-- 对于批量更新操作缓存SQL以提高性能 -->
                <prop key="defaultExecutorType">BATCH</prop>
                <!-- 数据库超过25000秒仍未响应则超时 -->
                <prop key="defaultStatementTimeout">25000</prop>
            </props>
        </property>
        <!-- typeAliases：数组类型，用来指定别名的。指定了这个属性后，Mybatis会把这个类型
             的短名称作为这个类型的别名，前提是该类上没有标注@Alias注解，否则将使用该注解对应
             的值作为此种类型的别名。
        -->
        <property name="typeAliases">
            <array>
                <value>com.zking.gofcrm.authority.model.SysUser</value>
                <value>com.zking.gofcrm.authority.model.SysRole</value>
                <value>com.zking.gofcrm.authority.model.SysAuthority</value>
                <value>com.zking.gofcrm.authority.model.SysFunction</value>
                <value>com.zking.gofcrm.dictionary.model.Dictionary</value>
            </array>
        </property>

        <!-- mapper配置文件的加载 -->
        <property name="mapperLocations" value="classpath:mapping/*/*.xml"/>

        <!-- mybatis plugins配置 这里示范mybatis的分页插件 -->
        <property name="plugins">
            <array>
                <!-- mybatis分页插件 -->
                <bean class="com.github.pagehelper.PageInterceptor">
                    <property name="properties">
                        <!--使用下面的方式配置参数，一行配置一个 -->
                        <value>
                            <!-- 一行配置一个，官方是这样说的 -->
                            <!-- dialect：默认情况下会使用 PageHelper 方式进行分页，
                                 如果想要实现自己的分页逻辑，可以实现
                                 Dialect(com.github.pagehelper.Dialect) 接口，然后配置该属性
                                 为实现类的全限定名称。
                                 x.x.x版本之后可以不配置该属性
                            dialect=mysql-->
                            <!-- helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适
                                 的分页方式。 你可以配置helperDialect属性来指定分页插件使用哪种方
                                 言。-->
                            helperDialect=mysql
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 映射mapper接口 此处的作用相当于在spring的注册所有的mapper实现
         类(这个实现类不需要我们配置，mybatis通过你的*mapper.xml进行自动处理)
         并且将我们的SqlSessionFactory工厂对象注入进去-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com/zking/gofcrm/*/mapper"/>
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
    </bean>


</beans>