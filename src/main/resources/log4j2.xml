<?xml version="1.0" encoding="UTF-8"?>

<!-- 此配置文件为LOG4J的配置文件，老版本的一般都是
     使用log4j.properties，新版本的LOG4J2官方建议使用XML进行配置

     log4j 2.x版本不再支持像1.x中的.properties后缀的文件配置方式，2.x版本配置文件后缀名只能为".xml",".json"或者".jsn".
　　 系统选择配置文件的优先级(从先到后)如下：
     .classpath下的名为log4j2-test.json 或者log4j2-test.jsn的文件.
     .classpath下的名为log4j2-test.xml的文件.
     .classpath下名为log4j2.json 或者log4j2.jsn的文件.
     .classpath下名为log4j2.xml的文件.
　　我们一般默认使用log4j2.xml进行命名。如果本地要测试，可以把log4j2-test.xml放到classpath，而正式环境使用log4j2.xml，则在打包部署的时候不要打包log4j2-test.xml即可。

     下面请看详解：：：：：：
-->

<!-- 1)根节点   Configuration
        a)有两个属性:
			status  :  指定log4j本身的打印日志的级别   :    ALL< Trace < DEBUG < INFO < WARN < ERROR < FATAL < OFF。
			monitorinterval   :   用于指定log4j自动重新配置的监测间隔时间，单位是s,最小是5s.

       b)有两个子节点:
		    Appenders   :  详解见下面配置
		    Loggers     :  详解见下面配置
		(表明可以定义多个Appender和Logger).
-->
<Configuration status="DEBUG" monitorInterval="30">

	<!-- 基本属性配置节点 -->
	<Properties>
		<!-- 配置日志文件输出目录 ${sys:user.home} /media/jzw/软件/gofcrm-->
		<Property name="LOG_HOME">${sys:user.home}/</Property>
		<property name="ERROR_LOG_FILE_NAME">${sys:user.home}/logs/error</property>
		<property name="WARN_LOG_FILE_NAME">${sys:user.home}/logs/warn</property>
		<property name="PATTERN">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t-%L] %-5level %logger{36} - %msg%n</property>
	</Properties>


	<!--
	 	a) Appenders 节点，常见的有三种子节点: Console、 RollingFile 、 File.
           1) Console 节点，用来定义输出到控制台的 Appender.
                     name  :  指定Appender的名字.
                     target  :  SYSTEM_OUT 或 SYSTEM_ERR,一般只设置默认:SYSTEM_OUT.
                     PatternLayout  :  输出格式，不设置默认为:%m%n.

           2) File 节点，用来定义输出到指定位置的文件的Appender.
                     name  :  指定Appender的名字.
                     fileName  :  指定输出日志的目的文件带全路径的文件名.
                     PatternLayout  :  输出格式，不设置默认为:%m%n.

           3) RollingFile 节点，用来定义超过指定大小自动删除旧的创建新的的Appender.
                     name  :  指定Appender的名字.
                     fileName  :  指定输出日志的目的文件带全路径的文件名.
                     PatternLayout  :  输出格式，不设置默认为:%m%n.
                     filePattern  :  指定新建日志文件的名称格式.
                     Policies  :  指定滚动日志的策略，就是什么时候进行新建日志文件输出日志.
                                 TimeBasedTriggeringPolicy  :  Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am.
                                 SizeBasedTriggeringPolicy  :  Policies子节点，基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小.
                     DefaultRolloverStrategy  :  用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
	 -->
	<Appenders>
		<!--这个输出控制台的配置 -->
		<Console name="Console" target="SYSTEM_OUT">
			<!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
			<ThresholdFilter level="trace" onMatch="ACCEPT"
				onMismatch="DENY" />
			<!-- 输出日志的格式 -->
			<!-- %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间 %p : 日志输出格式 %c : logger的名称 
				%m : 日志内容，即 logger.info("message") %n : 换行符 %C : Java类名 %L : 日志输出所在行数 %M 
				: 日志输出所在方法名 hostName : 本地机器名 hostAddress : 本地ip地址 -->
			<PatternLayout pattern="${PATTERN}" />
		</Console>

		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用 -->
		<!--append为TRUE表示消息增加到指定文件中，false表示消息覆盖指定的文件内容，默认值是true -->
		<File name="log" fileName="logs/test.log" append="false">
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
		</File>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size， 则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档 -->
		<RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/info.log"
			filePattern="${LOG_HOME}/$${date:yyyy-MM}/info-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch） -->
			<ThresholdFilter level="info" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
			<Policies>
				<!-- 基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。 modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am. -->
				<!-- 关键点在于 filePattern后的日期格式，以及TimeBasedTriggeringPolicy的interval， 日期格式精确到哪一位，interval也精确到哪一个单位 -->
				<!-- log4j2的按天分日志文件 : info-%d{yyyy-MM-dd}-%i.log -->
				<TimeBasedTriggeringPolicy interval="1"
					modulate="true" />
				<!-- SizeBasedTriggeringPolicy:Policies子节点， 基于指定文件大小的滚动策略，size属性用来定义每个日志文件的大小. -->
				<!-- <SizeBasedTriggeringPolicy size="2 kB" /> -->
			</Policies>
		</RollingFile>

		<RollingFile name="RollingFileWarn" fileName="${WARN_LOG_FILE_NAME}/warn.log"
			filePattern="${WARN_LOG_FILE_NAME}/$${date:yyyy-MM}/warn-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="warn" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
			<Policies>
				<TimeBasedTriggeringPolicy />
				<SizeBasedTriggeringPolicy size="2 kB" />
			</Policies>
			<!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件，这里设置了20 -->
			<DefaultRolloverStrategy max="20" />
		</RollingFile>

		<RollingFile name="RollingFileError" fileName="${ERROR_LOG_FILE_NAME}/error.log"
			filePattern="${ERROR_LOG_FILE_NAME}/$${date:yyyy-MM}/error-%d{yyyy-MM-dd-HH-mm}-%i.log">
			<ThresholdFilter level="error" onMatch="ACCEPT"
				onMismatch="DENY" />
			<PatternLayout
				pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n" />
			<Policies>
				<!-- log4j2的按分钟 分日志文件 : warn-%d{yyyy-MM-dd-HH-mm}-%i.log -->
				<TimeBasedTriggeringPolicy interval="1"
					modulate="true" />
				<!-- <SizeBasedTriggeringPolicy size="10 MB" /> -->
			</Policies>
		</RollingFile>

	</Appenders>

	<!--
	 	b) Loggers 节点，常见的有两种:Root和Logger.
            1) Root 节点用来指定项目的根日志，如果没有单独指定Logger，那么就会默认使用该Root日志输出
                  level  :  日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
                  AppenderRef  :  Root的子节点，用来指定该日志输出到哪个Appender.

           2) Logger 节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
                  level  :  日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF.
                  name  :  用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点.
                  AppenderRef  :  Logger的子节点，用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root.如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出。

	 -->
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->
	<Loggers>
		<!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->
		<logger name="org.springframework" level="INFO"></logger>
		<logger name="org.mybatis" level="INFO"></logger>

		<!-- 第三方日志系统 -->
		<logger name="org.springframework" level="ERROR" />
		<logger name="org.hibernate" level="ERROR" />
		<logger name="org.apache.struts2" level="ERROR" />
		<logger name="com.opensymphony.xwork2" level="ERROR" />
		<logger name="org.jboss" level="ERROR" />

		<!-- 配置日志的根节点 -->
		<root level="all">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileWarn" />
			<appender-ref ref="RollingFileError" />
		</root>

	</Loggers>

</Configuration>